#include <stdio.h>
void Create();
void Display();
struct student_db {
    char stu_name [20];
    int stu_rollnum;
    float stu_marks
};
struct student_db stu[3];
int main()
{
    int choice;
    do {
        printf("1.Create \t 2.Display \t 3.Search \t 4.Exit \n");
        printf("Enter your choice");
        scanf("%d",&choice);
        switch(choice) {
        case 1:
            Create();
            break;
        case 2:
            Display();
            break;
        case 3:
            search();
            break;
        case 4:
            break;
        default:
            printf("Invalid Choice");
            break;
        }
    } while (choice!=3);
    return 0;
}
void Create()
{
    printf("Enter student datbase: ");
    for(int i=0; i<3; i++) {
        printf("enter name ");
        scanf("%s", &stu[i].stu_name);
        printf("enter roll number ");
        scanf("%d",&stu[i].stu_rollnum);
        printf("enter marks ");
        scanf("%f",&stu[i].stu_marks);
    }
}
void Display()
{
    printf("student datbase:\n");
    for(int i=0; i<3; i++) {
        printf("%s \t %d \t %f \n", stu[i].stu_name,stu[i].stu_rollnum,stu[i].stu_marks);
    }
}
int search()
{
    int R;
    int flag=0;
    printf("Enter the student roll no. to be searched \n");
    scanf("%d",&R);
    for(int i=0; i<3; i++) {
        if(stu[i].stu_rollnum == R) {
            flag=1;
            break;
        }
    }
    if (flag==1) {
        printf("Roll no. is present");
    } else {
        printf("Roll no. is absent");
    }
    return 0;
}












..................


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define max 10
char stack[max];
int top=-1;
char push(char);
char pop();
int main(){
    char str[max];
    printf("enter string ");
    scanf("%s",&str);
    for(int i=0;i<strlen(str);i++){
        push(str[i]);
    }
     for(int i=0;i<strlen(str);i++){
        str[i]=pop();
    }
    printf("reversed string %s",str);
    return 0;
}
char push(char ch){
    if(top==max-1){
        printf("stack is full");
        return 0;
    }
    else{
        top=top+1;
        stack[top]=ch;
    }
}

char pop(){
    char ch;
    if(top==-1){
        printf("stack is empty");
        return 0;
    }
    else{
        ch=stack[top];
        top=top-1;
    }
    return ch;
}












................................







#include <stdio.h>
#include <stdlib.h>
typedef struct queue {
    int data;
    struct queue* Next;
} q;
q* front = NULL;
q* rear = NULL;
q* temp;
q* New_Node;
void insert(int);
int Delete();
int display();
int main()
{
    int choice, x;
    do {
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            printf("Enter the data: ");
            scanf("%d", &x);
            insert(x);
            break;
        case 2:
            x = Delete();
            printf("Deleted data from rear end: %d\n", x);
            break;
        case 3:
            display();
            break;
        case 4:
            break;
        default:
            printf("Invalid Input!\n");
        }
    } while (choice != 4);
    return 0;
}
void insert(int x)
{
    New_Node = (q*)malloc(sizeof(q));
    New_Node->data = x;
    New_Node->Next = NULL;
    if (front == NULL) {
        front = New_Node;
        rear = New_Node;
    } else {
        rear->Next = New_Node;
        rear = New_Node;
    }
}
int Delete()
{
    int x;
    if (front == NULL) {
        printf("Queue is empty\n");
        return 0;
    } else {
        temp = front;
        front = front->Next;
        x = temp->data;
        free(temp);
    }
    return x;
}
int display()
{
    if (front == NULL) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        for (temp = front; temp != NULL; temp = temp->Next) {
            printf("%d -> ", temp->data);
        }
    }
}










.....................................










#include<stdio.h>
#include<stdlib.h>

/*Structure declarations*/
typedef struct BSTnode {
    int data;
    struct BSTnode *left, *right;
} BSTnode;

BSTnode *root = NULL, *p;

/*Function prototype declarations*/
BSTnode *create();
BSTnode *search(BSTnode *, int);
BSTnode *insert(BSTnode *, int);
void inorder(BSTnode *);
void preorder(BSTnode *);
void postorder(BSTnode *);

/*Main function*/
int main() {
    int x, choice;

    do {
        printf("\n\n1)Create\t2)Search\t3)Insert");
        printf("\t4)Inorder\t5)Preorder\t6)Postorder\t7)Quit\n");
        printf("\nEnter Your Choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                root = create();
                break;
            case 2:
                printf("\nEnter the key to be searched: ");
                scanf("%d", &x);
                p = search(root, x);
                if (p == NULL)
                    printf("\n Not Found");
                else
                    printf("\n Found ");
                break;
            case 3:
                printf("\nEnter a Data to be Inserted: ");
                scanf("%d", &x);
                root = insert(root, x);
                break;
            case 4:
                inorder(root);
                break;
            case 5:
                preorder(root);
                break;
            case 6:
                postorder(root);
                break;
            case 7:
                break;

            default:
                printf("\n Invalid Choice.");
                break;
        }
    } while (choice != 7);

    return 0;
}
/*Function to create BST nodes*/
BSTnode *create() {
    int n, x, i;
    BSTnode *root = NULL;

    printf("\nEnter the total number of nodes: ");
    scanf("%d", &n);
    printf("\nEnter tree values: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &x);
        root = insert(root, x);
    }
    return root;
}

/*Function to insert BST node*/
BSTnode *insert(BSTnode *T, int x) {
    BSTnode *p, *q, *r;

    // acquire memory for the new node
    r = (BSTnode *)malloc(sizeof(BSTnode));
    r->data = x;
    r->left = NULL;
    r->right = NULL;

    if (T == NULL)
        return r;

    // Find the leaf node for insertion
    p = T;
    while (p != NULL) {
        q = p;
        if (x > p->data)
            p = p->right;
        else if (x < p->data)
            p = p->left;
    }

    if (x > q->data)
        q->right = r; //x as right child of q
    else if (x < q->data)
        q->left = r; //x as left child of q

    return T;
}

/*Function to search a BST node*/
BSTnode *search(BSTnode *root, int x) {
    while (root != NULL) {
        if (x == root->data)
            return root;
        else if (x > root->data)
            root = root->right;
        else if (x < root->data)
            root = root->left;
    }

    return NULL;
}

/* Reursive Inorder Traversal[LDR] Function */
void inorder(BSTnode *T) {
    if (T != NULL) {
        inorder(T->left);
        printf("%d\t", T->data);
        inorder(T->right);
    }
}

/* Reursive Preorder Traversal[DLR] Function */
void preorder(BSTnode *T) {
    if (T != NULL) {
        printf("%d\t", T->data);
        preorder(T->left);
        preorder(T->right);
    }
}
/* Reursive Postorder Traversal[LRD] Function */
void postorder(BSTnode *T) {
    if (T != NULL) {
        postorder(T->left);
        postorder(T->right);
        printf("%d\t", T->data);
    }
}



